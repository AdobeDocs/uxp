{"version":3,"sources":["webpack:///./src/pages/reference-js/Modules/uxp/Host Information/Host.md"],"names":["name","_frontmatter","JsDocParameters","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","id","parentName","isMDXComponent"],"mappings":"8LAQsBA,E,4DAFTC,G,UAAe,IAOtBC,GALgBF,EAKgB,kBALR,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,oBAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,EACF,8BACD,OAAO,cAACI,EAAD,eAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,mBAAGX,KAAK,OAAOY,GAAG,SAClB,mBAAQ,CACN,GAAM,kBADR,uBAGA,4HACA,cAACV,EAAD,CAAiBS,QAAQ,oBACzB,cAACT,EAAD,CAAiBS,QAAQ,oBACzB,mBAAGX,KAAK,gBAAgBY,GAAG,kBAC3B,mBAAQ,CACN,GAAM,oBADR,cAEkB,4BAAYC,WAAW,MAAvB,WAClB,uBAAG,wBAAQA,WAAW,KAAnB,cACH,+QACA,uBAAG,wBAAQA,WAAW,KAAnB,WAAH,KAAoD,4BAAYA,WAAW,KAAvB,UAApD,sDAA6J,4BAAYA,WAAW,KAAvB,SAA7J,KACA,mBAAGb,KAAK,YAAYY,GAAG,cACvB,mBAAQ,CACN,GAAM,gBADR,UAEc,4BAAYC,WAAW,MAAvB,WACd,uBAAG,wBAAQA,WAAW,KAAnB,cACH,uKACA,2BACE,uBAAOA,WAAW,SAChB,oBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,iBAKJ,uBAAOA,WAAW,SAChB,oBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,OACR,4BAAYA,WAAW,MAAvB,cACH,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,qCAMN,uBAAG,wBAAQA,WAAW,KAAnB,WAAH,KAAoD,4BAAYA,WAAW,KAAvB,UAApD,wDAA+J,4BAAYA,WAAW,KAAvB,aAA/J,KACA,mBAAGb,KAAK,eAAeY,GAAG,iBAC1B,mBAAQ,CACN,GAAM,mBADR,aAEiB,4BAAYC,WAAW,MAAvB,WACjB,uBAAG,wBAAQA,WAAW,KAAnB,cACH,0SACA,uBAAG,wBAAQA,WAAW,KAAnB,WAAH,KAAoD,4BAAYA,WAAW,KAAvB,UAApD,2DAAkK,4BAAYA,WAAW,KAAvB,UAAlK,MAKJJ,EAAWK,gBAAiB","file":"component---src-pages-reference-js-modules-uxp-host-information-host-md-d7e7d66242f5cf839cd2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp/uxp/node_modules/@adobe/gatsby-theme-parliament/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst JsDocParameters = makeShortcode(\"JsDocParameters\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <a name=\"host\" id=\"host\"></a>\n    <h1 {...{\n      \"id\": \"requireuxphost\"\n    }}>{`require(\"uxp\").host`}</h1>\n    <p>{`Includes useful information about the operating environment the plugin finds itself executing in.`}</p>\n    <JsDocParameters mdxType=\"JsDocParameters\" />\n    <JsDocParameters mdxType=\"JsDocParameters\" />\n    <a name=\"host-uilocale\" id=\"host-uilocale\"></a>\n    <h2 {...{\n      \"id\": \"uilocale--string\"\n    }}>{`uiLocale : `}<inlineCode parentName=\"h2\">{`string`}</inlineCode></h2>\n    <p><strong parentName=\"p\">{`Read only`}</strong></p>\n    <p>{`Allows you to obtain the language and region used to render the user interface for the host application. This property is useful in that it allows you to localize and internationalize your plugin's content to match that of the host application.`}</p>\n    <p><strong parentName=\"p\">{`Returns`}</strong>{`: `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` - the locale for the user interface. For example, `}<inlineCode parentName=\"p\">{`en_US`}</inlineCode>{`.`}</p>\n    <a name=\"host-name\" id=\"host-name\"></a>\n    <h2 {...{\n      \"id\": \"name--string\"\n    }}>{`name : `}<inlineCode parentName=\"h2\">{`string`}</inlineCode></h2>\n    <p><strong parentName=\"p\">{`Read only`}</strong></p>\n    <p>{`Indicates the name of the hosting application. This is useful if your plugin needs to adapt its behavior based upon the hosting application.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Values`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Application`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Photoshop`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Adobe Photoshop 2021 or better`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Returns`}</strong>{`: `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` - the name of the hosting application. For example, `}<inlineCode parentName=\"p\">{`Photoshop`}</inlineCode>{`.`}</p>\n    <a name=\"host-version\" id=\"host-version\"></a>\n    <h2 {...{\n      \"id\": \"version--string\"\n    }}>{`version : `}<inlineCode parentName=\"h2\">{`string`}</inlineCode></h2>\n    <p><strong parentName=\"p\">{`Read only`}</strong></p>\n    <p>{`Indicates the version of the hosting application. This is useful if your plugin needs to adapt its behavior depending upon the version of the host application. This may be due to new APIs being introduced in a given version, or to work around a bug in a specific version.`}</p>\n    <p><strong parentName=\"p\">{`Returns`}</strong>{`: `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` - the version of the hosting application. For example, `}<inlineCode parentName=\"p\">{`22.0.0`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}