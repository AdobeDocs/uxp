{"version":3,"sources":["webpack:///./src/pages/uxp/reference-html/General/Unsupported Elements.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yPAMaA,G,UAAe,IACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,mBAAQ,CACN,GAAM,wBADR,wBAGA,2HAAwG,4BAAYC,WAAW,KAAvB,QAAxG,KAA8J,4BAAYA,WAAW,KAAvB,QAA9J,iCAAgP,4BAAYA,WAAW,KAAvB,SAAhP,2IACA,mBAAQ,CACN,GAAM,cADR,cAGA,+CAA4B,4BAAYA,WAAW,KAAvB,OAA5B,yGACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,kNAUL,mBAAQ,CACN,GAAM,mBADR,mBAGA,gKACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sKAaL,mBAAQ,CACN,GAAM,iBADR,iBAGA,8DAA2C,4BAAYA,WAAW,KAAvB,QAA3C,yFACA,mBAAQ,CACN,GAAM,SADR,SAGA,8BAAW,4BAAYA,WAAW,KAAvB,WAAX,2KACA,yBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sCAUTJ,EAAWK,gBAAiB","file":"component---src-pages-uxp-reference-html-general-unsupported-elements-md-393101600f1cc55ddfed.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/uxp/uxp/node_modules/@adobe/gatsby-theme-parliament/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"unsupported-elements\"\n    }}>{`Unsupported Elements`}</h1>\n    <p>{`Only elements found in the surrounding documentation are supported. Unsupported elements such as `}<inlineCode parentName=\"p\">{`<li>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<ul>`}</inlineCode>{`, etc., are treated as simple `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{`s. As such, this does mean that you can often style unsupported elements in a way that more closely matches their browser counterparts.`}</p>\n    <h2 {...{\n      \"id\": \"typography\"\n    }}>{`Typography`}</h2>\n    <p>{`Several tags such as `}<inlineCode parentName=\"p\">{`<i>`}</inlineCode>{` are not supported. However, you can easily add some CSS in order to support their visual appearance:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`i, em { font-style: italic; }\nstrong { font-weight: bold; }\nq:before { content: '“'; }\nq:after { content: '”'; }\nblockquote { margin: 1em; }\npre { white-space: pre; }\ncode { font-family: Courier; }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"unordered-lists\"\n    }}>{`Unordered Lists`}</h2>\n    <p>{`UXP does not, by default, support lists or list items. However, you can simulate an unordered list with bullets with some simple CSS.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`ul {\n    margin-left: 1em;\n}\nli:before {\n    content: '•';\n    display: inline-block;\n    text-align: center;\n    margin-left: -1em;\n    width: 1em;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ordered-lists\"\n    }}>{`Ordered Lists`}</h2>\n    <p>{`UXP does not support ordered lists (`}<inlineCode parentName=\"p\">{`<ol>`}</inlineCode>{`). You can work around this by manually creating the numbered elements for each item.`}</p>\n    <h2 {...{\n      \"id\": \"title\"\n    }}>{`Title`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<title>`}</inlineCode>{` element is not used in UXP. If you do specify it, you may find that it makes itself visible inside your plugin. To remedy this, add the following CSS to your project:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`title {\n    display: none;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}