(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{UT0s:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return m})),a.d(t,"default",(function(){return i}));var n=a("wx14"),r=a("zLVn"),l=(a("q1tI"),a("7ljp")),d=a("LHWr"),m=(a("qKvR"),{}),c={_frontmatter:m},b=d.a;function i(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.mdx)(b,Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(l.mdx)("a",{name:"module-storage-folder",id:"module-storage-folder"}),Object(l.mdx)("h2",{id:"folder"},"Folder"),Object(l.mdx)("p",null,"Represents a folder on a file system. You'll never instantiate this directly,\nbut will get it by calling ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"FileSystemProvider#getTemporaryFolder"}),"FileSystemProvider#getTemporaryFolder"),",\n",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"FileSystemProvider#getFolder"}),"FileSystemProvider#getFolder"),", or via ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"Folder#getEntries"}),"Folder#getEntries"),"."),Object(l.mdx)("a",{name:"module-storage-folder-isfolder",id:"module-storage-folder-isfolder"}),Object(l.mdx)("h3",{id:"isfolder"},"isFolder"),Object(l.mdx)("p",null,"Indicates that this instance is a folder. Useful for type checking."),Object(l.mdx)("a",{name:"module-storage-folder-getentries",id:"module-storage-folder-getentries"}),Object(l.mdx)("h3",{id:"getentries"},"getEntries()"),Object(l.mdx)("p",null,"Returns an array of entries contained within this folder."),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Returns"),": ",Object(l.mdx)("inlineCode",{parentName:"p"},"Array.<Entry>")," - The entries within the folder.",Object(l.mdx)("br",{parentName:"p"}),"\n",Object(l.mdx)("strong",{parentName:"p"},"Example"),"  "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const entries = await aFolder.getEntries();\nconst allFiles = entries.filter(entry => entry.isFile);\n")),Object(l.mdx)("a",{name:"module-storage-folder-createentry",id:"module-storage-folder-createentry"}),Object(l.mdx)("h3",{id:"createentryname-options"},"createEntry(name, options)"),Object(l.mdx)("p",null,"Creates an entry within this folder and returns the appropriate instance."),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Returns"),": ",Object(l.mdx)("inlineCode",{parentName:"p"},"File")," ","|"," ",Object(l.mdx)("inlineCode",{parentName:"p"},"Folder")," - the created entry  "),Object(l.mdx)("table",null,Object(l.mdx)("thead",{parentName:"table"},Object(l.mdx)("tr",{parentName:"thead"},Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Param"),Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.mdx)("tbody",{parentName:"table"},Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"name"),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"string")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"the name of the entry to create")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"options"),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"any")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"[options.type]"),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"Symbol")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"types.file")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Indicates which kind of entry to create. Pass ",Object(l.mdx)("a",Object(n.a)({parentName:"td"},{href:"folder"}),"folder")," to create a new folder. Note that if the type is file then this method just create a file entry object and not the actual file on the disk. The file actually gets created when you call for eg: write method on the file entry object.")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"[options.overwrite]"),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"boolean")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"false")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"If ",Object(l.mdx)("inlineCode",{parentName:"td"},"true"),", the create attempt can overwrite an existing file")))),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Example"),"  "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const myNovel = await aFolder.createEntry("mynovel.txt");\n')),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Example"),"  "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const catImageCollection = await aFolder.createEntry("cats", {type = types.folder});\n')),Object(l.mdx)("a",{name:"module-storage-folder-createfile",id:"module-storage-folder-createfile"}),Object(l.mdx)("h3",{id:"createfilename-options"},"createFile(name, options)"),Object(l.mdx)("p",null,"Creates a File Entry object within this folder and returns the appropriate instance.\nNote that this method just create a file entry object and not the actual file on the disk.\nThe file actually gets created when you call for eg: write method on the file entry object."),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Returns"),": ",Object(l.mdx)("inlineCode",{parentName:"p"},"File")," - the created file entry  "),Object(l.mdx)("table",null,Object(l.mdx)("thead",{parentName:"table"},Object(l.mdx)("tr",{parentName:"thead"},Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Param"),Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.mdx)("tbody",{parentName:"table"},Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"name"),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"string")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"the name of the file to create.")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"options"),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"any")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"[options.overwrite]"),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"boolean")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"false")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"If ",Object(l.mdx)("inlineCode",{parentName:"td"},"true"),", the create attempt can overwrite an existing file")))),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Example"),"  "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const myNovelTxtFile = await aFolder.createFile("mynovel.txt");\n')),Object(l.mdx)("a",{name:"module-storage-folder-createfolder",id:"module-storage-folder-createfolder"}),Object(l.mdx)("h3",{id:"createfoldername"},"createFolder(name)"),Object(l.mdx)("p",null,"Creates a Folder within this folder and returns the appropriate instance."),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Returns"),": ",Object(l.mdx)("inlineCode",{parentName:"p"},"Folder")," - the created folder entry object  "),Object(l.mdx)("table",null,Object(l.mdx)("thead",{parentName:"table"},Object(l.mdx)("tr",{parentName:"thead"},Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Param"),Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.mdx)("tbody",{parentName:"table"},Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"name"),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"string")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"the name of the folder to create.")))),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Example"),"  "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const myCollectionsFolder = await aFolder.createFolder("collections");\n')),Object(l.mdx)("a",{name:"module-storage-folder-getentry",id:"module-storage-folder-getentry"}),Object(l.mdx)("h3",{id:"getentryfilepath"},"getEntry(filePath)"),Object(l.mdx)("p",null,"Gets an entry from within this folder and returns the appropriate instance."),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Returns"),": ",Object(l.mdx)("inlineCode",{parentName:"p"},"File")," ","|"," ",Object(l.mdx)("inlineCode",{parentName:"p"},"Folder")," - the fetched entry.  "),Object(l.mdx)("table",null,Object(l.mdx)("thead",{parentName:"table"},Object(l.mdx)("tr",{parentName:"thead"},Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Param"),Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.mdx)("tbody",{parentName:"table"},Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"filePath"),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"string")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"the name/path of the entry to fetch")))),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Example"),"  "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const myNovel = await aFolder.getEntry("mynovel.txt");\n')),Object(l.mdx)("a",{name:"module-storage-folder-renameentry",id:"module-storage-folder-renameentry"}),Object(l.mdx)("h3",{id:"renameentryentry-newname-options"},"renameEntry(entry, newName, options)"),Object(l.mdx)("p",null,"Renames an entry to a new name."),Object(l.mdx)("table",null,Object(l.mdx)("thead",{parentName:"table"},Object(l.mdx)("tr",{parentName:"thead"},Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Param"),Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.mdx)("tbody",{parentName:"table"},Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"entry"),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"Entry")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"the entry to rename")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"newName"),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"string")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"the new name to assign")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"options"),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"any")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"[options.overwrite]"),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"boolean")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"false")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"if ",Object(l.mdx)("inlineCode",{parentName:"td"},"true"),", renaming can overwrite an existing entry")))),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Example"),"  "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'await myNovels.rename(myNovel, "myFantasticNovel.txt");\n')),Object(l.mdx)("a",{name:"module-storage-folder-isfolder",id:"module-storage-folder-isfolder"}),Object(l.mdx)("h3",{id:"isfolderentry"},"isFolder(entry)"),Object(l.mdx)("p",null,"Checks if an entry is a folder. Safe to use if entry might be ",Object(l.mdx)("inlineCode",{parentName:"p"},"null")," or\n",Object(l.mdx)("inlineCode",{parentName:"p"},"undefined"),". Useful for type checking."),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Returns"),": ",Object(l.mdx)("inlineCode",{parentName:"p"},"boolean")," - if ",Object(l.mdx)("inlineCode",{parentName:"p"},"true"),", the entry is a folder  "),Object(l.mdx)("table",null,Object(l.mdx)("thead",{parentName:"table"},Object(l.mdx)("tr",{parentName:"thead"},Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Param"),Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.mdx)("tbody",{parentName:"table"},Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"entry"),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"any")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"the entry to check")))))}i.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-reference-js-uxp-storage-non-instantiatable-folder-md-008bc9766bbb5cb0dfe9.js.map